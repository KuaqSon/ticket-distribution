// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  Sprint        Sprint[]
  Ticket        Ticket[]
  Epic          Epic[]

  @@map(name: "users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Sprint {
  id           String   @id @default(cuid())
  userId       String
  name         String
  note         String?
  hourPerPoint Float    @default(0)
  formula      Json     @default("{}")
  startAt      DateTime
  endAt        DateTime
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Ticket Ticket[]
}

model Ticket {
  id          String  @id @default(cuid())
  userId      String
  sprintId    String
  name        String
  priority    Float   @default(0)
  storyPoint  Float   @default(0)
  status      String  @default("todo")
  epic        String?
  orderNumber Int     @default(0)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sprint Sprint @relation(fields: [sprintId], references: [id], onDelete: Cascade)
}

model Epic {
  id        String   @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
